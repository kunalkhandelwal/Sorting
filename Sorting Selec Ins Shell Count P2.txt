#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void display(int *,unsigned long int);
void copy(int *,unsigned long int,int *);
void create(int *,unsigned long int);

void selection_sort(int *,unsigned long int);
void insertion_sort(int *,unsigned long int);
void shell_sort(int *,unsigned long int);
void counting_sort(int *,unsigned long int,int *);

int main()
{
 clock_t t1=0,t2=0;
 double total;
 int *a,*b,*d,s=1;
 unsigned long int n;
 printf("Enter the size of the array:");
 scanf("%lu",&n);
 a=(int*)calloc(n,sizeof(int));
 b=(int *)calloc(n,sizeof(int));
 d=(int*)calloc(n,sizeof(int));
 create(a,n);
 copy(a,n,b);
 while(s!='0')
 {
  copy(b,n,a);
  printf("\n\n          **TYPES OF SORT**");
  printf("\n1. Selection Sort\n2. Insertion Sort\n3. Shell Sort\n4. Counting Sort\n");
  printf("Enter your Choice[1-4] or 0 to Exit: ");
  scanf("%d",&s);
  switch(s)
  {
   case 1:
          printf("\nBefore Sort:\n");
          display(a,n);
          t1=clock();
          selection_sort(a,n);
          t2=clock();
          total=(double)(t2-t1)/CLOCKS_PER_SEC;
          printf("\nAfter Sort:\n");
          display(a,n);
          break;
   case 2:
          printf("\nBefore Sort:\n");
          display(a,n);
          t1=clock();
          insertion_sort(a,n);
          t2=clock();
          total=(double)(t2-t1)/CLOCKS_PER_SEC;
          printf("\nAfter Sort:\n");
          display(a,n);
          break;
   case 3:
          printf("\nBefore Sort:\n");
          display(a,n);
          t1=clock();
          shell_sort(a,n);
          t2=clock();
          total=(double)(t2-t1)/CLOCKS_PER_SEC;
          printf("\nAfter Sort:\n");
          display(a,n);
          break;
   case 4:
          printf("\nBefore Sort:\n");
          display(a,n);
          t1=clock();
          counting_sort(a,n,d);
          t2=clock();
          total=(double)(t2-t1)/CLOCKS_PER_SEC;
          printf("\nAfter Sort:\n");
          display(d,n);
          break;
   case 0:
          printf("\n\n              ****************************EXIT****************************                \n\n");
          exit(0);
   default:
  	 	   printf("Invalid Choice");
  }
  printf("\nThe time taken for Sorting is %lf seconds.\n",total);
 }
}
void display(int a[],unsigned long int n)
{
 unsigned long int i;
 for(i=0;i<n;i++)
 {
  printf("  %d	",a[i]);
 }
}
void copy(int a[],unsigned long int n,int b[])
{
 unsigned long int i;
 for(i=0;i<=n-1;i++)
 {
  b[i]=a[i];
 }
}
void create(int a[],unsigned long int n)
{
 unsigned long int i,j;
 int s;
 printf("\nPlease choose the type of array:");
 printf("\n1. Ascending[Best Case]\n2. Descending[Worst Case]\n3. Random[Average Case]\n4. Almost Sorted\n5. Manual Entry\n");
 printf("\n Enter Your Choice: ");
 scanf("%d",&s);
 switch(s)
 {
  case 1:
   		 for(i=0;i<n;i++)
   		 {
   		  a[i]=i+1;
   		 }
   		 display(a,n);
   		 break;
  case 2:
         j=n;
         for(i=0;i<n;i++)
   		 {
   		  a[i]=j;
   		  j--;
   		 }
   		  display(a,n);
         break;
  case 3:
         for(i=0;i<=n-1;i++)
         {
          a[i]=rand()%1000;
         }
         display(a,n);
         break;
  case 4:
         for(i=0;i<n;i++)
         {
          if(i%5==0)
          {
            a[i]=5*i;
          }
          else
          {
           a[i]=i;
          }
          display(a,n);
         }
         break;
  case 5:
         for(i=0;i<n;i++)
         {
          printf("Enter the %lu Element: ",i+1);
          scanf("%d",&a[i]);
         }
         break;
 }
}
void selection_sort(int a[],unsigned long int n)
{
 unsigned long int i,j,temp,min;
    for(i=0;i<n-1;i++)
    {
        min=i;
        for(j=i+1;j<n;j++)
        {
            if(a[min]>a[j])
            min=j;
        }
        if(min!=i)
        {
            temp=a[i];
            a[i]=a[min];
            a[min]=temp;
        }
    }
}
void insertion_sort(int a[],unsigned long int n)
{
    int i,j,key;
     for(i=1;i<n;i++)
    {
        key=a[i];
        j=i-1;
        while(j>=0 && a[j]>key)
        {
            a[j+1]=a[j];
            j=j-1;
        }
        a[j+1]=key;
    }
}
void shell_sort(int a[],unsigned long int n)
{
 int temp;
 unsigned long int i,j,gap;
 for(gap=n/2;gap>0;gap=gap/2)
 {
  for(i=gap;i<n;i=i+1)
  {
   temp=a[i];
   for(j=i;j>=gap && a[j-gap]>temp;j=j-gap)
   {
    a[j]=a[j-gap];
   }
    a[j]=temp;
  }
 }
}
void counting_sort(int a[],unsigned long int n, int d[])
{
 int *c;    /* c is for frequency*/
 unsigned long int i,max;
 max=a[0];
 for(i=0;i<n;i++)
 {
  if(a[i]>max)
  {
   max=a[i];
  }
 }
 c=(int*)calloc(max+1,sizeof(int));
 for(i=0;i<n;i++)
 {
  c[a[i]]++;
 }
 for(i=1;i<=max;i++)
 {
  c[i]=c[i]+c[i-1];/* Sum of Frequencies*/
 }
 for(i=n;i>0;i--)
 {
  d[c[a[i-1]]-1]=a[i-1];
  c[a[i-1]]--;
 }
}