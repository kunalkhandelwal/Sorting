#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void merge_sort(int *,unsigned long int,unsigned long int);
void merge(int *,unsigned long int,unsigned long int,unsigned long int);

void quick_sort(int *,unsigned long int,unsigned long int);
int partition(int *,unsigned long int,unsigned long int);

void display(int *,unsigned long int );
void copy(int *,unsigned long int,int *);
void create(int *,unsigned long int );

int main()
{
 clock_t t1=0,t2=0;
 double total;
 int *a,*b,s=1;
 unsigned long int n,p,r;
 printf("Enter the size of the array:");
 scanf("%lu",&n);
 a=(int*)calloc(n,sizeof(int));
 b=(int*)calloc(n,sizeof(int));
 create(a,n);
 copy(a,n,b);
 while(s!='0')
 {
  copy(b,n,a);
  printf("\n\n          **TYPES OF SORT**");
  printf("\n1. Merge Sort\n2. Quick Sort\n3. Change Array\n");
  printf("Enter your Choice[1-3] or 0 to Exit: ");
  scanf("%d",&s);
  switch(s)
  {
   case 1:
          p=0;
          r=n-1;
          printf("\nBefore Sort:\n");
          display(a,n);
          t1=clock();
          merge_sort(a,p,r);
          t2=clock();
          total=(double)(t2-t1)/CLOCKS_PER_SEC;
          printf("\nAfter Sort:\n");
          display(a,n);
          break;
   case 2:
          p=0;
          r=n-1;
          printf("\nBefore Sort:\n");
          display(a,n);
          t1=clock();
          quick_sort(a,p,r);
          t2=clock();
          total=(double)(t2-t1)/CLOCKS_PER_SEC;
          printf("\nAfter Sort:\n");
          display(a,n);
          break;
   case 3:
          create(a,n);
          copy(a,n,b);
          break;
    case 0:
           printf("\n\n         **************EXIT**************");
           exit(0);
    default:
           printf("Invalid Choice.");
  }
  printf("\nThe time taken is %lf.\n",total);
 }
}
void display(int a[],unsigned long int n)
{
 unsigned long int i;
 for(i=0;i<n;i++)
 {
  printf("  %d	",a[i]);
 }
}
void copy(int a[],unsigned long int n,int b[])
{
 unsigned long int i;
 for(i=0;i<=n-1;i++)
 {
  b[i]=a[i];
 }
}
void create(int a[],unsigned long int n)
{
 unsigned long int i,j;
 int s;
 printf("\nPlease choose the type of array:");
 printf("\n1. Ascending[Best Case]\n2. Descending[Worst Case]\n3. Random[Average Case]\n4. Almost Sorted\n5. Manual Entry\n");
 printf("\n Enter Your Choice: ");
 scanf("%d",&s);
 switch(s)
 {
  case 1:
   		 for(i=0;i<n;i++)
   		 {
   		  a[i]=i+1;
   		 }
   		 display(a,n);
   		 break;
  case 2:
         j=n;
         for(i=0;i<n;i++)
   		 {
   		  a[i]=j;
   		  j--;
   		 }
   		  display(a,n);
         break;
  case 3:
         for(i=0;i<=n-1;i++)
         {
          a[i]=rand();
         }
         display(a,n);
         break;
  case 4:
         for(i=0;i<n;i++)
         {
          if(i%5==0)
          {
            a[i]=5*i;
          }
          else
          {
           a[i]=i;
          }
         }
         display(a,n);
         break;
  case 5:
         for(i=0;i<n;i++)
         {
          printf("Enter the %lu Element: ",i+1);
          scanf("%d",&a[i]);
         }
         display(a,n);
         break;
  default:
         printf("Invalid Choice.");
 }
}
void merge_sort(int a[],unsigned long int p,unsigned long int r)
{
 unsigned long int q;
 if(p<r)
 {
  q=(p+r)/2;
  merge_sort(a,p,q);
  merge_sort(a,q+1,r);
  merge(a,p,q,r);
 }
}
void merge(int a[],unsigned long int p,unsigned long int q,unsigned long int r)
{
 int *lt,*rt;
 unsigned long int i,j,k,n1=q-p+1,n2=r-q;
 lt=(int *)calloc(n1+1,sizeof(int));
 rt=(int *)calloc(n2+1,sizeof(int));
 for(i=0;i<n1;i++)
 {
  lt[i]=a[p+i];
 }
 for(j=0;j<n2;j++)
 {
  rt[j]=a[q+j+1];
 }
 lt[n1]=99999999;
 rt[n2]=99999999;
 i=0;
 j=0;
 for(k=p;k<=r;k++)
 {
  if(lt[i]<=rt[j])
  {
   a[k]=lt[i];
   i++;
  }
  else
  {
   a[k]=rt[j];
   j++;
  }
 }
}

void quick_sort(int a[],unsigned long int p,unsigned long int r)
{
 unsigned long int q;
 if (p<r)
 {
  q=partition(a,p,r);
  quick_sort(a,p,q-1);
  quick_sort(a,q+1,r);
 }
}
int partition(int a[],unsigned long int p,unsigned long int r)
{
 unsigned long int x,i,j,temp;
 x=a[r];
 i=p-1;
 for(j=p;j<=r-1;j++)
 {
  if(a[j]<=x)
  {
   i++;
   temp=a[i];
   a[i]=a[j];
   a[j]=temp;
  }
 }
 temp=a[i+1];
 a[i+1]=a[r];
 a[r]=temp;
 return (i+1);
}